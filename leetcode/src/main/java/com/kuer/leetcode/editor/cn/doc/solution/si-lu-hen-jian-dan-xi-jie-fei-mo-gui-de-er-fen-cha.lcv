**思路分析**：

+ 不可以找到 `target` 以后，然后向两边扩散（线性查找），这样的话时间复杂度为 $O(N)$，这里 $N$ 是输入数组的长度；
+ 找 `target` 第一次出现的位置和最后一次出现的位置的时候，都只能用「二分查找」才符合题目的意思，注意分类讨论，并且把分类讨论的结果合并。

**参考代码**：

* []

```Java
public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int len = nums.length;
        if (len == 0) {
            return new int[]{-1, -1};
        }

        int firstPosition = findFirstPosition(nums, target);
        if (firstPosition == -1) {
            return new int[]{-1, -1};
        }

        int lastPosition = findLastPosition(nums, target);
        return new int[]{firstPosition, lastPosition};
    }

    private int findFirstPosition(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            // 小于一定不是解
            if (nums[mid] < target) {
                // 下一轮搜索区间是 [mid + 1..right]
                left = mid + 1;
            } else {
                // nums[mid] >= target，下一轮搜索区间是 [left..mid]
                right = mid;
            }
        }

        // 退出循环以后不能确定 nums[left] 是否等于 target，因此需要再判断一次
        if (nums[left] == target) {
            return left;
        }
        return -1;
    }

    private int findLastPosition(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        while (left < right) {
            int mid = left + (right - left + 1) / 2;
            if (nums[mid] > target) {
                // 下一轮搜索区间是 [left..mid - 1]
                right = mid - 1;
            } else {
                // 下一轮搜索区间是 [mid..right]
                left = mid;
            } 
        }
        // 主程序先执行 findFirstPosition，能执行到 findLastPosition 说明数组中一定存在等于 target 的元素，因此这里不用判断 nums[left] 是否等于 target
        return left;
    }
}
```

**参考代码的补充说明**：

`findFirstPosition()`，分成三种情况：下面的描述可能有一点啰嗦，但是很多时候问题并不难，仔细一点分析就不难做对。

**情况 1** ：当 `nums[mid] < target` 时

+ `mid` 一定不是 `target` 第一次出现的位置；
+ 由于数组有序，`mid` 的左边一定比 `nums[mid]` 还小，因此 `mid` 的左边一定不是 `target` 第一次出现的位置；
+ `mid` 的右边比 `nums[mid]` 还大，因此 `mid` 的右边 **有可能** 存在 `target` 第一次出现的位置。

因此下一轮搜索区间是 `[mid + 1..right]`，此时设置 `left = mid + 1`；

**情况 2** ：当 `nums[mid] == target` 时

+ `mid` 有可能是 `target` 第一次出现的位置；
+ `mid` 的左边也有可能是 `target` 第一次出现的位置；
+ `mid` 的右边一定不是 `target` 第一次出现的位置。

因此下一轮搜索区间在 `[left..mid]`，此时设置 `right = mid`。

**情况 3** ：当 `nums[mid] > target` 时

+ `mid` 一定不是 `target` 第一次出现的位置；
+ `mid` 的右边也一定不是 `target` 第一次出现的位置；
+ `mid` 的左边有可能是 `target` 第一次出现的位置，因此下一轮搜索区间在 `[left..mid - 1]`，此时设置 `right = mid - 1`。

**重点在这里**：把情况 ② 和情况 ③ 合并，即当 `nums[mid] >= target` 的时候，下一轮搜索区间是 `[left..mid]`，此时设置 `right = mid`。这样做是因为：**只有当区间分割是 `[left..mid]` 和 `[mid + 1..right]` 的时候，`while(left < right)` 退出循环以后才有 `left == right` 成立**。

> [这里](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/si-lu-hen-jian-dan-xi-jie-fei-mo-gui-de-er-fen-cha/1437835) 有一个例子，说明如果分成三个部分，退出循环以后 `left` 与 `right` 不能重合；
> 感谢 [@dynamite-z](/u/dynamite-z/) 朋友纠正了一处笔误。

`findLastPosition()` 也可以类似分析，这里省略。

在本题解中，`while(left < right)` 只表示退出循环以后有 `left == right` 成立，**不表示搜索区间为左闭右开区间**，本题解以及我的其它题解中，对循环不变量的定义均为：在 `nums[left..right]` 中查找目标元素。

**复杂度分析**：

+ 时间复杂度：$O(\log N)$，这里 $N$ 是数组的长度，两个子问题都是二分查找，因此时间复杂度为对数级别；
+ 空间复杂度：$O(1)$，只使用了常数个数的辅助变量。

---

最后解释一下什么是「左闭右开」。

### 什么是左闭右开？

下面用具体的数字进行说明，如果要找的元素的下标位于区间 `[left..9]`，

+ 设置 `right = 9` ，表示左闭右闭，右闭所以可以等于 $9$；
+ 设置 `right = 10` ，表示左闭右开，右开，$10$ 取不到，所以依然是 `[left..9]`。我所有的题解均不采用这种方式，理由是「左闭右闭」更直接。

