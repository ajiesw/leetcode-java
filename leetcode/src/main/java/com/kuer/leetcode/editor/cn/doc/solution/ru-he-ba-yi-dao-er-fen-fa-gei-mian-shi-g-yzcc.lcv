1、先说有两种类型的解法，一种是暴力，一种是二分法求边界，由于必须设计时间复杂度为 O(log n) 的算法解决此问题，所以选择二分法，这样体现递进的思考过程，别上来一言不发写个二分，失去一个表现机会。

2、对于二分法，我们可以分别求左边界和右边界，也可以二分求左边界之后接着遍历计数，两种情况对应在真实场景下连续相等的数据一般有多长。如果经常出现很长一串连续相等的数据，就用二分法求右边界，否则容易使算法退化到o(n)。PS：在C++11标准中，nums.size()的时间复杂度是Constant常数级，O（1）

3、分析完了之后，给一个规范的解法，注意函数驼峰式命名，异常处理等能体现专业性的小细节

4、另外，我看到评论区很多人说二分法边界很痛苦，可以看看我的二分法，不需要再纠结return left还是return right

* []

```C++
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        return {searchLeftOrRightBound(nums, target, "left"), searchLeftOrRightBound(nums, target, "right")};
    }
private:
    int searchLeftOrRightBound(vector<int>& nums, int target, const string& bound) {
        int left = 0, right = nums.size() - 1;
        int res = -1;
        while (left <= right) {
            int mid = (left + right) >> 1;
            if (nums[mid] < target) {
                left = mid + 1;
            }
            else if (nums[mid] > target) {
                right = mid - 1;
            }
            else {
                res = mid;
                if (bound == "left") {
                    right = mid - 1;
                }
                else if (bound == "right") {
                    left = mid + 1;
                }
                else {
                    // 异常处理段
                }
            }
        }
        return res;
    }
};
```

# 原创不易，欢迎点赞~

