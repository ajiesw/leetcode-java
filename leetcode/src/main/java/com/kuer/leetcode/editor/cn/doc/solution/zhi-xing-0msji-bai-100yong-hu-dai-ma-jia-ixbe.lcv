### 解题思路

nums为反转后的数组，可以看成由左右两个升序数组构成。首先找出两个有序数组的连接位置index，将nums分为两个升序数组，再对两个升序数组进行二分查找。由于nums中的数据不重复，因此若左侧有序数组查找到了索引位置，则返回此结果；若右侧序数组查找到了索引位置，则还需+index+1

### 代码

* java

```java
class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 1){
            if(target == nums[0]){
                return 0;
            }
            return -1;
        }

        //两个有序数组的分离点
        int index = -1;
        for(int i = 0; i < nums.length-1; i++){
            if(nums[i] > nums[i+1]){
                index = i;
                break;
            }
        }
        //如果没反转
        if(index < 0){
            int a = binarySearch(nums, 0, nums.length - 1, target);
            return a;
        }

        int[] arr1 = new int[index+1];//左边的升序数组
        for(int i = 0; i < arr1.length; i++){
            arr1[i] = nums[i];
        }

        int[] arr2 = new int[nums.length-index-1];//右边的升序数组
        for(int i = 0; i < arr2.length; i++){
            arr2[i] = nums[index+1+i];
        }

        int left = binarySearch(arr1, 0, arr1.length - 1, target);
        int right = binarySearch(arr2, 0, arr2.length - 1, target);

        if(left < 0 && right < 0){
            return -1;
        }
        if (left >= 0){
            return left;
        } else {
            return right+index+1;
        }


    }

    //二分查找
    public static int binarySearch(int[] arr,int left,int right,int value){
        //left > right说明递归整个数组但没有找到
        if (left > right){
            return -1;
        }

        int middle = (left + right) / 2;
        int dest = arr[middle];

        if (value > dest){//要查找的值比中间值大，向右递归
            return binarySearch(arr,middle+1,right,value);
        } else if (value < dest) {//要查找的值比中间值小，向左递归
            return binarySearch(arr,left,middle-1,value);
        } else {
            //相等，则返回索引位置
            return middle;
        }

    }
}
```

