# 暴力法

**注意到所有可能结果只包含两个字符'('和')'**
**那么用0和1代替，就可以转换为二进制的位运算的问题研究了**

**假如有4对括号，那么需要8个bit位来存储括号的位置**
**所有的顺序可以用[0b00000000,0x11111111]这个范围来表示**
**这是一个连续的整数范围，可以非常方便的编写循环逻辑**

**遍历这个范围，筛选出有效的值**

**暴力法最重要的一步就是找到主体循环逻辑**

时间复杂度
$O(2^{2n}n)$
空间复杂度
$O(n)$

主体逻辑

* JavaScript

```JavaScript
/**
 * 括号生成
 * @param {number} n
 * @return {string[]}
 */
var generateParenthesis = function(n) {
  const res = []
  const bitCount = 2*n
  const max = (1<<bitCount)-1 // 搜索边界 二进制 [0, max]
  for (let current = 0; current < max; current++) {
    if (valid(current, bitCount)) {
      res.push(current + (1<<bitCount))
    }
  }
  return res.map(b => convert2String(b, bitCount))
};
```

括号验证（从官方题解改编）

* JavaScript

```JavaScript
/**
 * 验证是括号是否有效（由字符串版本改为bit版本，0-代表'('，1-代表')'）
 * @param {Number} current 
 * @param {Number} bitCount
 * @returns {Boolean}
 */
var valid = (current, bitCount) => {
  current += (1<<bitCount) // 相当于二进制在最前面补充了一个bit,
  let balance = 0
  let c = 0
  for (let i = 0; i < bitCount; i++) {
    c = current & 1 //取最后一位，0-代表（，1-代表）
    if (c === 1) {
      balance++;
    } else {
      balance--;
    }
    if (balance < 0) {
      return false;
    }
    current =  current>>1
  }
  return balance == 0;
}
```

转换为字符串

* JavaScript

```JavaScript
/**
 * 将bit形式转换为字符串
 * @param {Number} current 
 * @param {Number} bitCount 
 * @returns {String}
 */
var convert2String = (current, bitCount) => {
  let res = ''
  current += (1<<bitCount) // 相当于二进制在最前面补充了一个bit,
  let balance = 0
  let c = 0
  for (let i = 0; i < bitCount; i++) {
    c = current & 1 //取最后一位，0-代表（，1-代表）
    res = (c === 0 ? '(' : ')') + res
    current =  current>>1
  }
  return res
}
```

